# -*- coding: utf-8 -*-
"""
计算
1、矩阵乘法是通过dot函数实现的,
2、数组上的算数运算应用于每个元素。并创建一个用结果填充的新的数组
3、+= 和 *= 操作之类的，直接在原数组上做修改，不会创建新数组。
4、不同数组类型之间的操作，结果数组的类型趋于更普通或者更精确的一种（称为向上转型）
5、类似于求数组所有元素的和的一元操作都是作为 ndarray 类的方法实现的。
    a = np.random.random((2,3))
    a.min()
    a.sum()
    也可以通过axis参数指定哪一列
    b.sum(axis=0)
    第一列进行相加
"""

import numpy as np

# 索引，切片和迭代
a = np.arange(10)**3
# array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])
a[2]   # 8
a[2:5]       # array([ 8, 27, 64])
a[:6:2] = -1000
# 此时 a为array([-1000,     1, -1000,    27, -1000,   125,   216,   343,   512,   729])
a[::-1]
# array([  729,   512,   343,   216,   125, -1000,    27, -1000,     1, -1000])


# 操控形状 每一个数组的形状通过每一个 axis 中的元素数量
"""
reshape：根据已有数组和指定的shape，生成一个新的数组
vstack：用来将多个数组在垂直（v代表vertical）方向拼接（数组的维度必须匹配）
hstack：用来将多个数组在水平（h代表horizontal）方向拼接（数组的维度必须匹配）
hsplit：用来将数组在水平方向拆分
vsplit：用来将数组在垂直方向拆分

column_stack 函数可以将 1D 数组作为 2D 数组的列
"""

a = np.floor(10*np.random.random((3,4)))
a.ravel()   # 装为x维度为1的数组
a.reshape(6,2)   # 转为x为6，y为2的数组

"""
简单的赋值是不会赋值的
view（浅拷贝）
深拷贝     copy方法

"""

